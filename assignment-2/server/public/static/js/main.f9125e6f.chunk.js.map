{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","main","marginTop","spacing","display","flexDirection","alignItems","form","width","submit","margin","root","App","classes","useForm","mode","reValidateMode","defaultValues","control","handleSubmit","register","reset","useState","data","setData","error","setError","cards","setCards","onSubmit","url","a","axios","method","headers","then","response","console","log","analysis","catch","useEffect","filter","article","related","map","Card","className","CardContent","Typography","variant","component","title","pos","color","author","CardActions","Button","size","href","publication","Container","maxWidth","CssBaseline","noValidate","as","TextField","fullWidth","label","required","autoFocus","id","name","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2TAoBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,UAAWF,EAAMG,QAAQ,GACzBC,QAAS,OACTC,cAAe,SACfC,WAAY,UAEdC,KAAM,CACJC,MAAO,OACPN,UAAWF,EAAMG,QAAQ,IAE3BM,OAAQ,CACNC,OAAQV,EAAMG,QAAQ,EAAG,EAAG,IAE9BQ,KAAM,CACJH,MAAO,WAoHII,MA5Gf,WACE,IAAMC,EAAUf,IADH,EAEsCgB,YAAQ,CACzDC,KAAM,WACNC,eAAgB,WAChBC,cAAe,KAHTC,EAFK,EAELA,QAAmBC,GAFd,EAEIC,SAFJ,EAEcD,cAFd,KAE4BE,MAMjBC,mBAAS,KARpB,mBAQNC,EARM,KAQAC,EARA,OASaF,mBAAS,IATtB,mBASNG,EATM,KASCC,EATD,OAUaJ,mBAAS,IAVtB,mBAUNK,EAVM,KAUCC,EAVD,KAaPC,EAAQ,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sDACfC,IAAM,CACJC,OAAQ,OACRH,IAAK,gCACLP,KAAMO,EACNI,QAAS,CACP,eAAgB,sBAGjBC,MAAK,SAACC,GACLC,QAAQC,IAAIF,GACZZ,EAAQY,EAASb,KAAKgB,aAEvBC,OAAM,SAACf,GACNY,QAAQC,IAAIb,GACRA,EAAMW,UACRV,EAASD,EAAMW,SAASb,SAhBf,2CAAH,sDAiDd,OA5BAkB,qBAAU,WACRb,EACEL,EACGmB,QAAO,SAACC,GAAD,OAAaA,EAAQC,WAC5BC,KAAI,SAACF,GAAD,OACH,kBAACG,EAAA,EAAD,CAAMC,UAAWlC,EAAQF,MACvB,kBAACqC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,MAChCR,EAAQS,OAEX,kBAACH,EAAA,EAAD,CAAYF,UAAWlC,EAAQwC,IAAKC,MAAM,iBACvCX,EAAQY,SAGb,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAQC,KAAK,QAAQC,KAAMhB,EAAQb,KAChCa,EAAQiB,qBAMpB,CAACrC,IAEJkB,qBAAU,WACRjB,EAAQ,MACP,CAACC,IAGF,yBAAKsB,UAAU,OACb,kBAACc,EAAA,EAAD,CAAWV,UAAU,MAAMW,SAAS,MAClC,kBAACC,EAAA,EAAD,MACA,yBAAKhB,UAAWlC,EAAQZ,MACtB,kBAACgD,EAAA,EAAD,CAAYE,UAAU,KAAKD,QAAQ,MAAnC,WAGA,0BACErB,SAAUV,EAAaU,GACvBkB,UAAWlC,EAAQN,KACnByD,YAAU,GAEV,kBAAC,IAAD,CACEC,GACE,kBAACC,EAAA,EAAD,CACEhB,QAAQ,WACRxC,OAAO,SACPyD,WAAS,EACTC,MAAM,iBACNC,UAAQ,EACRC,WAAS,IAGbD,UAAQ,EACRnD,QAASA,EACTqD,GAAG,QACHC,KAAK,QAEP,kBAACf,EAAA,EAAD,CACEgB,KAAK,SACLN,WAAS,EACTjB,QAAQ,YACRI,MAAM,UACNP,UAAWlC,EAAQJ,QALrB,WAUDkB,MCpIS+C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnD,MAAK,SAAAoD,GACJA,EAAaC,gBAEdhD,OAAM,SAAAf,GACLY,QAAQZ,MAAMA,EAAMgE,c","file":"static/js/main.f9125e6f.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport axios from \"axios\";\n\nimport Button from \"@material-ui/core/Button\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport TextField from \"@material-ui/core/TextField\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport Link from \"@material-ui/core/Link\";\nimport Card from \"@material-ui/core/Card\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Box from \"@material-ui/core/Box\";\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Container from \"@material-ui/core/Container\";\nimport { CardActions, CardContent, FormGroup } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\n\nconst useStyles = makeStyles((theme) => ({\n  main: {\n    marginTop: theme.spacing(8),\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  form: {\n    width: \"100%\", // Fix IE 11 issue.\n    marginTop: theme.spacing(1),\n  },\n  submit: {\n    margin: theme.spacing(3, 0, 2),\n  },\n  root: {\n    width: \"600\",\n  },\n}));\n\n/**\n *  NOTES: multiple response functions have been written\n */\n\nfunction App() {\n  const classes = useStyles();\n  const { control, register, handleSubmit, reset } = useForm({\n    mode: \"onSubmit\",\n    reValidateMode: \"onChange\",\n    defaultValues: {},\n  });\n\n  const [data, setData] = useState([]);\n  const [error, setError] = useState({});\n  const [cards, setCards] = useState([]);\n\n  // Function for form\n  const onSubmit = async (url) => {\n    axios({\n      method: \"post\",\n      url: \"http://localhost:4000/clarity\",\n      data: url,\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    })\n      .then((response) => {\n        console.log(response);\n        setData(response.data.analysis);\n      })\n      .catch((error) => {\n        console.log(error);\n        if (error.response) {\n          setError(error.response.data);\n        }\n      });\n  };\n\n  useEffect(() => {\n    setCards(\n      data\n        .filter((article) => article.related)\n        .map((article) => (\n          <Card className={classes.root}>\n            <CardContent>\n              <Typography variant=\"h5\" component=\"h2\">\n                {article.title}\n              </Typography>\n              <Typography className={classes.pos} color=\"textSecondary\">\n                {article.author}\n              </Typography>\n            </CardContent>\n            <CardActions>\n              <Button size=\"small\" href={article.url}>\n                {article.publication}\n              </Button>\n            </CardActions>\n          </Card>\n        ))\n    );\n  }, [data]);\n\n  useEffect(() => {\n    setData([]);\n  }, [error]);\n\n  return (\n    <div className=\"App\">\n      <Container component=\"App\" maxWidth=\"xs\">\n        <CssBaseline />\n        <div className={classes.main}>\n          <Typography component=\"h1\" variant=\"h5\">\n            Clarity\n          </Typography>\n          <form\n            onSubmit={handleSubmit(onSubmit)}\n            className={classes.form}\n            noValidate\n          >\n            <Controller\n              as={\n                <TextField\n                  variant=\"outlined\"\n                  margin=\"normal\"\n                  fullWidth\n                  label=\"Enter a URL...\"\n                  required\n                  autoFocus\n                />\n              }\n              required\n              control={control}\n              id=\"input\"\n              name=\"url\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              color=\"primary\"\n              className={classes.submit}\n            >\n              Submit\n            </Button>\n          </form>\n          {cards}\n        </div>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n//import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}