{"version":3,"sources":["components/SentimentMap.js","components/Sentiment.js","App.js","serviceWorker.js","index.js"],"names":["generateMarkers","locations","icon","map","location","Marker","position","coordinates","component","L","divIcon","className","html","ReactDOMServer","renderToString","Popup","sentiment","type","polarity","SentimentMap","newsLocations","twitterLocations","Map","center","zoom","style","height","width","TileLayer","url","attribution","size","fill","useStyles","makeStyles","root","minWidth","bullet","display","margin","transform","title","fontSize","pos","marginBottom","Sentiment","data","classes","topic","error","news","tweets","Fragment","Grid","container","direction","justify","alignItems","item","aggregated","Card","CardContent","Typography","color","gutterBottom","variant","twitterLocation","description","theme","spacing","padding","alertRoot","marginTop","App","useState","setTopic","sentimentData","setSentimentData","useAxios","method","headers","manual","useCache","loading","execute","response","useForm","control","handleSubmit","onSubmit","text","a","JSON","stringify","useEffect","console","log","Container","maxWidth","Paper","md","sm","xs","as","TextField","name","fullWidth","autoFocus","required","Button","textTransform","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.fae32949.chunk.js","sourcesContent":["import React from \"react\";\nimport { Map, Marker, Popup, TileLayer } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport ReactDOMServer from \"react-dom/server\";\nimport { AiOutlineTwitter } from \"react-icons/ai\";\nimport { BsNewspaper } from \"react-icons/bs\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst renderIcon = (component) => {\n  return L.divIcon({\n    className: \"map icon\",\n    html: ReactDOMServer.renderToString(component),\n  });\n};\n\nconst generateMarkers = (locations, icon) => {\n  return locations.map((location) => (\n    <Marker position={location.coordinates} icon={renderIcon(icon)}>\n      <Popup>\n        Sentiment: {location.sentiment.type}\n        <br />\n        Polarity: {location.sentiment.polarity}\n      </Popup>\n    </Marker>\n  ));\n};\n\nfunction SentimentMap({ newsLocations, twitterLocations }) {\n  return (\n    <Map center={[0, 0]} zoom={2} style={{ height: \"100vh\", width: \"100vh\" }}>\n      <TileLayer\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n      />\n      {generateMarkers(\n        newsLocations || [],\n        <BsNewspaper size={32} style={{ fill: \"black\" }} />\n      )}\n      {generateMarkers(\n        twitterLocations || [],\n        <AiOutlineTwitter size={32} style={{ fill: \"blue\" }} />\n      )}\n    </Map>\n  );\n}\n\nexport default SentimentMap;\n","import React from \"react\";\nimport SentimentMap from \"./SentimentMap\";\nimport \"antd/dist/antd.css\";\nimport { Empty } from \"antd\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Card, CardContent, Grid, Typography } from \"@material-ui/core\";\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: \"inline-block\",\n    margin: \"0 2px\",\n    transform: \"scale(0.8)\",\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nfunction Sentiment({ data, topic, error }) {\n  const classes = useStyles();\n\n  // TODO: need to account for no data which can be found (display some sort of error or notify the user)\n  let { news, tweets } = data;\n\n  // If data is available\n  if (news || tweets) {\n    return (\n      <React.Fragment>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Grid item>\n            {news && news.aggregated ? (\n              <Card className={classes.root}>\n                <CardContent>\n                  <Typography\n                    className={classes.title}\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                    News Sentiment\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"h3\">\n                    Feeling: {news.aggregated.type}\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"h3\">\n                    Polarity: {news.aggregated.polarity}\n                  </Typography>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card className={classes.root}>\n                <CardContent>\n                  <Typography\n                    className={classes.title}\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                    News Sentiment\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"h3\">\n                    No news sentiment\n                  </Typography>\n                </CardContent>\n              </Card>\n            )}\n          </Grid>\n          <Grid item>\n            {tweets && tweets.aggregated ? (\n              <Card className={classes.root}>\n                <CardContent>\n                  <Typography\n                    className={classes.title}\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                    Twitter Sentiment\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"h3\">\n                    Feeling: {tweets.aggregated.type}\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"h3\">\n                    Polarity: {tweets.aggregated.polarity}\n                  </Typography>\n                </CardContent>\n              </Card>\n            ) : (\n              <Card className={classes.root}>\n                <CardContent>\n                  <Typography\n                    className={classes.title}\n                    color=\"textSecondary\"\n                    gutterBottom\n                  >\n                    Twitter Sentiment\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"h3\">\n                    No twitter sentiment\n                  </Typography>\n                </CardContent>\n              </Card>\n            )}\n          </Grid>\n        </Grid>\n        <SentimentMap\n          newsLocations={news && news.location}\n          twitterLocation={tweets && tweets.location}\n        />\n      </React.Fragment>\n    );\n  }\n\n  // When no data is available\n  return <Empty description={<span>No Sentiment Data</span>} />;\n}\n\nexport default Sentiment;\n","import React, { useState, useEffect } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport { TextField, Paper, Button } from \"@material-ui/core\";\nimport useAxios from \"axios-hooks\";\nimport PacmanLoader from \"react-spinners/PacmanLoader\";\nimport Sentiment from \"./components/Sentiment\";\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(2),\n  },\n  padding: {\n    padding: theme.spacing(1),\n  },\n  alertRoot: {\n    width: \"100%\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nfunction App() {\n  // Use the styles stated above\n  const classes = useStyles();\n  // State for holding topic user entered\n  const [topic, setTopic] = useState(\"\");\n  // Default state for sentiment data\n  const [sentimentData, setSentimentData] = useState({\n    news: { aggregated: {}, location: [] },\n    tweets: { aggregated: {}, location: [] },\n  });\n  // Axios hook to manage requests better\n  const [{ data, loading, error, response }, execute] = useAxios(\n    {\n      method: \"post\",\n      // url: \"http://localhost:8000/interwhat\",\n      url: \"http://54.153.162.105/interwhat\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n    },\n    { manual: true, useCache: false }\n  );\n\n  const { control, handleSubmit } = useForm();\n\n  // Function for form\n  const onSubmit = async (text) => {\n    // Merges this object with the existing one in the hook and sends the data to the API\n    execute({\n      data: JSON.stringify(text),\n    });\n\n    setTopic(text.text);\n  };\n\n  // Update the sentimentData state variable upon data response from API\n  useEffect(() => {\n    setSentimentData({ ...data });\n    console.log(JSON.stringify(data));\n  }, [data]);\n\n  return (\n    <div className=\"App\">\n      <Container style={{ marginTop: \"50px\" }} maxWidth=\"sm\">\n        <Grid\n          container\n          direction=\"column\"\n          justify=\"space-between\"\n          alignItems=\"center\"\n        >\n          <Grid\n            container\n            item\n            direction=\"column\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n            <Grid item>\n              <Typography\n                color=\"primary\"\n                variant=\"h1\"\n                component=\"h2\"\n                gutterBottom\n              >\n                Interwhat\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Typography\n                color=\"secondary\"\n                variant=\"h4\"\n                component=\"h4\"\n                gutterBottom\n              >\n                What is the Internet feeling like today?\n              </Typography>\n            </Grid>\n          </Grid>\n          <Paper className={classes.padding}>\n            <div className={classes.margin}>\n              <form onSubmit={handleSubmit(onSubmit)}>\n                <Grid container alignItems=\"center\" spacing={8}>\n                  <Grid item md={true} sm={true} xs={true}>\n                    <Controller\n                      as={<TextField variant=\"outlined\" />}\n                      name=\"text\"\n                      control={control}\n                      fullWidth\n                      autoFocus\n                      required\n                    />\n                  </Grid>\n                </Grid>\n                <Grid container justify=\"center\" style={{ marginTop: \"10px\" }}>\n                  <Controller\n                    as={\n                      <Button\n                        variant=\"outlined\"\n                        color=\"primary\"\n                        style={{ textTransform: \"none\" }}\n                        type=\"submit\"\n                      >\n                        Submit Query\n                      </Button>\n                    }\n                    name=\"text\"\n                    control={control}\n                    fullWidth\n                    autoFocus\n                    required\n                  />\n                </Grid>\n              </form>\n            </div>\n          </Paper>\n          <Grid container justify=\"center\" style={{ marginTop: \"50px\" }}>\n            {loading ? (\n              <PacmanLoader\n                size={25}\n                style={{ margin: \"2px\" }}\n                color={\"#123abc\"}\n              />\n            ) : (\n              <Sentiment data={sentimentData} topic={topic} error={error} />\n            )}\n          </Grid>\n        </Grid>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}